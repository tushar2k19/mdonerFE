<template>
  <div class="dashboard-background min-h-screen">
    <div class="blob-container" aria-hidden="true"></div>
    
    <!-- Main Content -->
    <main class="container mx-auto p-6 md:p-8 relative z-10">
      <div class="flex flex-col md:flex-row justify-between items-start mb-8 gap-4">
        <div class="flex items-center gap-4">
          <div class="p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full shadow-lg">
            <svg class="w-8 h-8 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10"></circle>
              <circle cx="12" cy="12" r="3"></circle>
              <line x1="12" y1="2" x2="12" y2="5"></line>
              <line x1="12" y1="19" x2="12" y2="22"></line>
              <line x1="2" y1="12" x2="5" y2="12"></line>
              <line x1="19" y1="12" x2="22" y2="12"></line>
              <line x1="4.22" y1="4.22" x2="6.34" y2="6.34"></line>
              <line x1="17.66" y1="17.66" x2="19.78" y2="19.78"></line>
              <line x1="4.22" y1="19.78" x2="6.34" y2="17.66"></line>
              <line x1="17.66" y1="6.34" x2="19.78" y2="4.22"></line>
            </svg>
          </div>
          <div>
            <h1 class="text-3xl font-bold text-gray-800">Task Management Dashboard</h1>
            <p class="text-gray-500">Ministry of Development of North Eastern Region</p>
          </div>
        </div>
        <div class="bg-white border border-gray-200 rounded-xl p-4 text-center shadow-sm w-full md:w-auto">
          <p class="font-semibold text-gray-800">Today</p>
          <p class="text-sm text-gray-500 whitespace-nowrap">{{ getCurrentDate() }}</p>
        </div>
      </div>

      <!-- Stat Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <div class="bg-white p-4 rounded-2xl shadow-sm border-l-4 border-orange-500 hover-shadow-orange transition-all duration-300 hover:-translate-y-1">
          <div class="flex justify-between items-start">
            <div class="flex flex-col">
              <p class="text-gray-500 font-medium">Total Tasks</p>
              <p class="text-4xl font-bold text-gray-800 my-2">{{ totalTasks }}</p>
              <p class="text-sm text-gray-400">Active approved tasks</p>
            </div>
            <div class="p-3 rounded-full bg-orange-100">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 text-orange-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
            </div>
          </div>
          <div class="mt-4 text-right">
            <span class="px-3 py-1 text-xs font-semibold rounded-full bg-orange-100 text-orange-800">ACTIVE</span>
          </div>
        </div>
        
        <div class="bg-white p-4 rounded-2xl shadow-sm border-l-4 border-blue-500 hover-shadow-blue transition-all duration-300 hover:-translate-y-1">
          <div class="flex justify-between items-start">
            <div class="flex flex-col">
              <p class="text-gray-500 font-medium">Action Items</p>
              <p class="text-4xl font-bold text-gray-800 my-2">{{ totalSubtasks }}</p>
              <p class="text-sm text-gray-400">Total sub-items</p>
            </div>
            <div class="p-3 rounded-full bg-blue-100">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
              </svg>
            </div>
          </div>
          <div class="mt-4 text-right">
            <span class="px-3 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">IN PROGRESS</span>
          </div>
        </div>
        
        <div class="bg-white p-4 rounded-2xl shadow-sm border-l-4 border-green-500 hover-shadow-green transition-all duration-300 hover:-translate-y-1">
          <div class="flex justify-between items-start">
            <div class="flex flex-col">
              <p class="text-gray-500 font-medium">Overall Progress</p>
              <p class="text-4xl font-bold text-gray-800 my-2">{{ overallProgress }}%</p>
              <p class="text-sm text-gray-400">{{ totalCompletedSubtasks }}/{{ totalSubtasks }} completed</p>
            </div>
            <div class="p-3 rounded-full bg-green-100">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
          <div class="mt-4 text-right">
            <span class="px-3 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">ON TRACK</span>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div class="lg:col-span-2 bg-white p-6 rounded-2xl shadow-sm flex flex-col transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
          <h2 class="text-xl font-semibold text-gray-800 mb-1">Task Completion Progress</h2>
          <p class="text-gray-500 text-sm mb-4">Real-time progress tracking</p>
          
          <div v-if="loading" class="flex-grow text-center border-2 border-dashed border-gray-200 rounded-lg flex items-center justify-center py-20">
            <div class="flex flex-col items-center">
              <div class="loading-spinner-new"></div>
              <p class="text-gray-500 mt-4">Loading tasks...</p>
            </div>
          </div>
          
          <div v-else-if="progressTasks.length === 0" class="flex-grow text-center border-2 border-dashed border-gray-200 rounded-lg flex items-center justify-center py-20">
            <p class="text-gray-500">No active tasks to display</p>
          </div>
          
          <div v-else class="flex-grow overflow-y-auto progress-list-new">
            <div v-for="task in progressTasks" :key="task.id" class="progress-entry-new mb-4">
              <div class="flex justify-between items-center mb-2">
                <div class="flex-1">
                  <div class="font-semibold text-gray-800 text-sm">{{ task.description }}</div>
                  <div class="text-xs text-gray-500">{{ task.sector_division }}</div>
                </div>
                <span class="text-sm font-semibold text-blue-600 ml-4">{{ task.progress }}%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-gradient-to-r from-blue-500 to-indigo-600 h-2 rounded-full transition-all duration-500" :style="{ width: task.progress + '%' }"></div>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white p-6 rounded-2xl shadow-sm h-full flex flex-col transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
          <h2 class="text-xl font-semibold text-gray-800 mb-1">Overall Completion</h2>
          <p class="text-gray-500 text-sm mb-4">System-wide progress</p>
          <div class="flex-grow flex flex-col items-center justify-center my-4">
            <div class="relative flex items-center justify-center">
              <svg height="160" width="160">
                <circle stroke="#e6e6e6" fill="transparent" stroke-width="12" r="65" cx="80" cy="80"></circle>
                <circle 
                  stroke="#22c55e" 
                  fill="transparent" 
                  stroke-width="12" 
                  :stroke-dasharray="circumference" 
                  :style="{ strokeDashoffset: strokeDashoffset, strokeLinecap: 'round' }" 
                  r="65" 
                  cx="80" 
                  cy="80" 
                  transform="rotate(-90 80 80)"
                  class="transition-all duration-1000"
                ></circle>
              </svg>
              <span class="absolute text-3xl font-bold text-gray-700">{{ overallProgress }}%</span>
            </div>
            <p class="mt-4 text-lg text-gray-600 font-medium">Complete</p>
          </div>
          <div class="flex justify-around pt-4 border-t border-gray-200 text-center">
            <div>
              <p class="flex items-center justify-center gap-2 font-bold text-lg text-green-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {{ totalCompletedSubtasks }}
              </p>
              <p class="text-sm text-gray-500">Completed</p>
            </div>
            <div>
              <p class="flex items-center justify-center gap-2 font-bold text-lg text-orange-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {{ totalSubtasks - totalCompletedSubtasks }}
              </p>
              <p class="text-sm text-gray-500">Remaining</p>
            </div>
          </div>
        </div>

        <div class="lg:col-span-3 bg-white p-6 rounded-2xl shadow-sm transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
          <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-4 gap-4">
            <div>
              <h2 class="text-xl font-semibold text-gray-800 mb-1 flex items-center gap-2">
                Approved Tasks 
                <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </h2>
              <p class="text-sm text-gray-500">🔥 {{ approvedTasks.length }} Active Tasks</p>
            </div>
            <div class="relative w-full md:w-auto md:max-w-xs">
              <input 
                v-model="searchQuery"
                type="text" 
                placeholder="Search tasks by description, sector..." 
                class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-400" 
              />
              <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </span>
            </div>
          </div>
          
          <div v-if="loading" class="text-center py-20 border-2 border-dashed border-gray-200 rounded-lg">
            <div class="flex flex-col items-center">
              <div class="loading-spinner-new"></div>
              <p class="text-gray-500 mt-4">Loading tasks...</p>
            </div>
          </div>
          
          <div v-else-if="approvedTasks.length === 0" class="text-center py-20 border-2 border-dashed border-gray-200 rounded-lg">
            <p class="text-gray-500">No approved tasks found</p>
          </div>
          
          <div v-else class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div 
              v-for="task in approvedTasks" 
              :key="task.id"
              @click="openTaskDetails(task)"
              class="task-card-new bg-white border border-gray-200 rounded-xl p-5 cursor-pointer transition-all duration-300 hover:shadow-lg hover:-translate-y-1"
            >
              <div class="flex justify-between items-start mb-3">
                <span class="text-xs font-semibold text-indigo-600 bg-indigo-50 px-3 py-1 rounded-full">{{ generateTaskCode(task) }}</span>
                <span class="text-xs font-semibold text-green-600 bg-green-50 px-3 py-1 rounded-full">Approved</span>
              </div>
              
              <h3 class="font-semibold text-gray-800 mb-3 line-clamp-2">{{ task.description }}</h3>
              
              <div class="space-y-2 text-sm mb-4">
                <div class="flex items-start">
                  <span class="text-gray-500 font-medium w-24 flex-shrink-0">Sector:</span>
                  <span class="text-gray-700">{{ task.sector_division }}</span>
                </div>
                <div class="flex items-start">
                  <span class="text-gray-500 font-medium w-24 flex-shrink-0">Review:</span>
                  <span class="text-gray-700">{{ formatDate(task.review_date) }}</span>
                </div>
                <div class="flex items-start">
                  <span class="text-gray-500 font-medium w-24 flex-shrink-0">Owner:</span>
                  <span class="text-gray-700">{{ task.responsibility }}</span>
                </div>
              </div>
              
              <div class="mb-4">
                <div class="flex justify-between items-center mb-2">
                  <span class="text-xs text-gray-500">Progress</span>
                  <span class="text-xs font-semibold text-gray-700">{{ getTaskProgress(task) }}%</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div class="bg-gradient-to-r from-green-500 to-emerald-600 h-2 rounded-full transition-all duration-500" :style="{ width: getTaskProgress(task) + '%' }"></div>
                </div>
                <p class="text-xs text-gray-500 mt-1">{{ getCompletedSubtasks(task) }}/{{ getTotalSubtasks(task) }} items completed</p>
              </div>
              
              <button @click.stop="viewTask(task)" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-300">
                View Details
              </button>
            </div>
          </div>
        </div>
      </div>
    </main>

    <!-- Task Details Modal -->
    <div v-if="selectedTask" class="modal-overlay" @click="closeTaskDetails">
      <div class="task-modal" @click.stop>
        <div class="modal-header">
          <h3>{{ selectedTask.description }}</h3>
          <button @click="closeTaskDetails" class="close-btn">✕</button>
        </div>
        
        <div class="modal-content">
          <!-- Task Meta Information Grid -->
          <div class="task-meta-grid">
            <div class="meta-item">
              <span class="meta-label">Task ID:</span>
              <span class="meta-value">{{ generateTaskCode(selectedTask) }}</span>
            </div>
            <div class="meta-item">
              <span class="meta-label">Sector:</span>
              <span class="meta-value">{{ selectedTask.sector_division }}</span>
            </div>
            <div class="meta-item">
              <span class="meta-label">Review Date:</span>
              <span class="meta-value">{{ formatDate(selectedTask.review_date) }}</span>
            </div>
            <div class="meta-item">
              <span class="meta-label">Responsibility:</span>
              <span class="meta-value">{{ selectedTask.responsibility }}</span>
            </div>
            <div class="meta-item">
              <span class="meta-label">Progress:</span>
              <span class="meta-value">{{ getTaskProgress(selectedTask) }}% ({{ getCompletedSubtasks(selectedTask) }}/{{ getTotalSubtasks(selectedTask) }} items)</span>
            </div>
            <div class="meta-item">
              <span class="meta-label">Reviewed By:</span>
              <div class="reviewers-list">
                <span v-if="selectedTaskReviewers.length === 0" class="meta-value">No reviewers yet</span>
                <div v-else class="reviewer-badges">
                  <span v-for="reviewer in selectedTaskReviewers" :key="reviewer.id" class="reviewer-badge">
                    {{ reviewer.name }}
                  </span>
                </div>
              </div>
            </div>
          </div>

          <!-- Action Items Section -->
          <div class="action-items-section">
            <h4>Action Items</h4>
            <div class="action-content-display" v-html="getFormattedActionItems(selectedTask)"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'Home',
  
  data() {
    return {
      tasks: [],
      loading: true,
      searchQuery: '',
      selectedTask: null,
      selectedTaskReviewers: []
    }
  },
  
  computed: {
    approvedTasks() {
      if (!this.searchQuery) {
        return this.tasks
      }
      return this.tasks.filter(task => 
        (task.description && task.description.toLowerCase().includes(this.searchQuery.toLowerCase())) ||
        (task.sector_division && task.sector_division.toLowerCase().includes(this.searchQuery.toLowerCase())) ||
        (task.responsibility && task.responsibility.toLowerCase().includes(this.searchQuery.toLowerCase()))
      )
    },

    totalTasks() {
      return this.tasks.length
    },

    totalSubtasks() {
      return this.approvedTasks.reduce((total, task) => {
        return total + this.getTotalSubtasks(task);
      }, 0);
    },

    totalCompletedSubtasks() {
      return this.approvedTasks.reduce((total, task) => {
        return total + this.getCompletedSubtasks(task);
      }, 0);
    },

    overallProgress() {
      if (this.totalSubtasks === 0) return 0;
      return Math.round((this.totalCompletedSubtasks / this.totalSubtasks) * 1000) / 10;
    },

    progressTasks() {
      return this.approvedTasks.map(task => ({
        ...task,
        progress: this.getTaskProgress(task)
      }))
    },

    // Circular progress calculations
    circumference() {
      const radius = 65;
      return 2 * Math.PI * radius;
    },

    strokeDashoffset() {
      const progress = this.overallProgress || 0;
      return this.circumference - (progress / 100) * this.circumference;
    },

    recentTaskDescriptions() {
      return this.tasks.slice(0, 5).map(task => ({
          id: task.id,
        description: task.description.length > 40 ? 
          task.description.substring(0, 40) + '...' : 
          task.description
        }))
    },

    sampleSubtasks() {
      const allSubtasks = []
      this.tasks.forEach(task => {
        if (task.current_version && task.current_version.action_nodes) {
          const taskSubtasks = this.extractSubtasksRecursive(task.current_version.action_nodes)
          allSubtasks.push(...taskSubtasks)
        }
      })
      return allSubtasks.slice(0, 5).map(subtask => 
        subtask.length > 50 ? subtask.substring(0, 50) + '...' : subtask
      )
    }
  },

  async created() {
    await this.loadTasks()
  },

  mounted() {
    // Ensure scrolling is enabled when Home component mounts
    // This fixes the issue where signin page disables scrolling
    document.documentElement.style.overflow = 'auto'
    document.body.style.overflow = 'auto'
    document.body.style.height = 'auto'
    document.documentElement.style.height = 'auto'
  },

  methods: {
    getCurrentDate() {
      const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
      return new Date().toLocaleDateString('en-US', options);
    },

    async loadTasks() {
      try {
        this.loading = true
        const response = await this.$http.secured.get('/tasks/approved')
        
        if (response.data.tasks) {
          this.tasks = response.data.tasks.map(task => ({
            ...task,
            action_nodes: this.processActionNodes(task.action_nodes || []),
            total_subtasks: this.getTotalSubtasks(task),
            completed_subtasks: this.getCompletedSubtasks(task),
            progress_percentage: this.getTaskProgress(task)
          }))
        }
      } catch (error) {
        console.error('Error loading tasks:', error)
        this.$toast.error('Failed to load tasks')
      } finally {
        this.loading = false
      }
    },

    processActionNodes(nodes) {
      if (!nodes) return [];
      return nodes.map(node => ({
        ...node,
        content: this.stripHtmlTags(node.content || ''),
        children: node.children ? this.processActionNodes(node.children) : [],
        completed: node.completed || false
      }))
    },

    countNodesRecursive(nodes) {
      if (!nodes) return 0;
      let count = 0;
      nodes.forEach(node => {
        count += 1;
        if (node.children && node.children.length > 0) {
          count += this.countNodesRecursive(node.children);
        }
      });
      return count;
    },

    countCompletedNodesRecursive(nodes) {
      if (!nodes) return 0;
      let count = 0;
      nodes.forEach(node => {
        if (node.completed) count += 1;
        if (node.children && node.children.length > 0) {
          count += this.countCompletedNodesRecursive(node.children);
        }
      });
      return count;
    },

    getTotalSubtasks(task) {
      if (task.current_version && task.current_version.action_nodes) {
        return this.countNodesRecursive(task.current_version.action_nodes)
      }
      return 0
    },

    getCompletedSubtasks(task) {
      if (task.current_version && task.current_version.action_nodes) {
        return this.countCompletedNodesRecursive(task.current_version.action_nodes)
      }
      return 0
    },

    getTaskProgress(task) {
      if (!task.current_version || !task.current_version.action_nodes) return 0;
      const completed = this.getCompletedSubtasks(task);
      const total = this.getTotalSubtasks(task);
      if (total === 0) return 0;
      return Math.round((completed / total) * 1000) / 10;
    },

    extractSubtasksRecursive(nodes) {
      const subtasks = []
      nodes.forEach(node => {
        subtasks.push(node.content || 'Untitled item')
        if (node.children && node.children.length > 0) {
          subtasks.push(...this.extractSubtasksRecursive(node.children))
        }
      })
      return subtasks
    },

    stripHtmlTags(html) {
      const doc = new DOMParser().parseFromString(html, 'text/html')
      return doc.body.textContent || ''
    },

    async openTaskDetails(task) {
      this.selectedTask = task
      this.selectedTaskReviewers = []
      
      // Fetch reviewers for this task
      try {
        await this.fetchTaskReviewers(task.id)
      } catch (error) {
        console.error('Error fetching reviewers:', error)
      }
    },

    closeTaskDetails() {
      this.selectedTask = null
      this.selectedTaskReviewers = []
    },

    async fetchTaskReviewers(taskId) {
      try {
        // Get all reviews for this task to find distinct reviewers
        const response = await this.$http.secured.get('/reviews')
        
        if (response.data && response.data.data) {
          const taskReviews = response.data.data.filter(review => 
            review.task && review.task.id === taskId
          )
          
          // Extract unique reviewers
          const reviewersMap = new Map()
          taskReviews.forEach(review => {
            if (review.reviewer) {
              reviewersMap.set(review.reviewer.id, {
                id: review.reviewer.id,
                name: review.reviewer.name,
                email: review.reviewer.email
              })
            }
          })
          
          this.selectedTaskReviewers = Array.from(reviewersMap.values())
        }
      } catch (error) {
        console.error('Error fetching task reviewers:', error)
        this.selectedTaskReviewers = []
      }
    },

    getTaskActionHTML(task) {
      return task.action_to_be_taken || 'No action items defined';
    },

    viewTask(task) {
      // Implement view task logic
      console.log('Viewing task:', task.id);
    },

    getCircleStyle() {
      // Convert percentage to degrees (360 * percentage/100)
      // Start from -90 degrees (top) and go clockwise
      const progress = (this.overallProgress || 0) * 3.6;
      return {
        '--progress': `${progress}deg`
      };
    },

    generateTaskCode(task) {
      return `TASK-${String(task.id).padStart(4, '0')}`;
    },

    formatDate(date) {
      if (!date) return 'Not set';
      return new Date(date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    getFormattedActionItems(task) {
      // Use the same action_to_be_taken HTML that TentativeDashboard uses
      // This already contains the properly formatted action nodes with indentation
      return task.action_to_be_taken || 'No action items defined';
    }
  }
}
</script>

<style>
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

/* Tailwind CSS CDN utility classes */
.container {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: 1rem;
  padding-right: 1rem;
}

@media (min-width: 640px) {
  .container { max-width: 640px; }
}

@media (min-width: 768px) {
  .container { max-width: 768px; }
}

@media (min-width: 1024px) {
  .container { max-width: 1024px; }
}

@media (min-width: 1280px) {
  .container { max-width: 1280px; }
}

@media (min-width: 1536px) {
  .container { max-width: 1536px; }
}

/* Tailwind utilities */
.mx-auto { margin-left: auto; margin-right: auto; }
.p-6 { padding: 1.5rem; }
.p-4 { padding: 1rem; }
.p-3 { padding: 0.75rem; }
.p-5 { padding: 1.25rem; }
.px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }
.px-4 { padding-left: 1rem; padding-right: 1rem; }
.py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }
.py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
.py-20 { padding-top: 5rem; padding-bottom: 5rem; }
.pl-10 { padding-left: 2.5rem; }
.pr-4 { padding-right: 1rem; }
.mb-1 { margin-bottom: 0.25rem; }
.mb-2 { margin-bottom: 0.5rem; }
.mb-3 { margin-bottom: 0.75rem; }
.mb-4 { margin-bottom: 1rem; }
.mb-8 { margin-bottom: 2rem; }
.mt-1 { margin-bottom: 0.25rem; }
.mt-4 { margin-top: 1rem; }
.ml-4 { margin-left: 1rem; }
.my-2 { margin-top: 0.5rem; margin-bottom: 0.5rem; }
.my-4 { margin-top: 1rem; margin-bottom: 1rem; }
.gap-2 { gap: 0.5rem; }
.gap-4 { gap: 1rem; }
.gap-6 { gap: 1.5rem; }
.gap-8 { gap: 2rem; }
.grid { display: grid; }
.flex { display: flex; }
.flex-col { flex-direction: column; }
.flex-1 { flex: 1 1 0%; }
.flex-shrink-0 { flex-shrink: 0; }
.items-center { align-items: center; }
.items-start { align-items: flex-start; }
.justify-center { justify-content: center; }
.justify-between { justify-between: space-between; }
.justify-around { justify-content: space-around; }
.space-y-2 > * + * { margin-top: 0.5rem; }
.w-full { width: 100%; }
.w-24 { width: 6rem; }
.w-5 { width: 1.25rem; }
.w-6 { width: 1.5rem; }
.w-8 { width: 2rem; }
.h-2 { height: 0.5rem; }
.h-5 { height: 1.25rem; }
.h-6 { height: 1.5rem; }
.h-7 { height: 1.75rem; }
.h-8 { height: 2rem; }
.h-full { height: 100%; }
.min-h-screen { min-height: 100vh; }
.relative { position: relative; }
.absolute { position: absolute; }
.top-1\/2 { top: 50%; }
.left-3 { left: 0.75rem; }
.z-10 { z-index: 10; }
.cursor-pointer { cursor: pointer; }
.rounded-lg { border-radius: 0.5rem; }
.rounded-xl { border-radius: 0.75rem; }
.rounded-2xl { border-radius: 1rem; }
.rounded-full { border-radius: 9999px; }
.border { border-width: 1px; }
.border-2 { border-width: 2px; }
.border-l-4 { border-left-width: 4px; }
.border-t { border-top-width: 1px; }
.border-dashed { border-style: dashed; }
.border-gray-200 { border-color: #e5e7eb; }
.border-gray-300 { border-color: #d1d5db; }
.border-orange-500 { border-color: #f97316; }
.border-blue-500 { border-color: #3b82f6; }
.border-green-500 { border-color: #22c55e; }
.bg-white { background-color: #ffffff; }
.bg-gray-200 { background-color: #e5e7eb; }
.bg-orange-100 { background-color: #ffedd5; }
.bg-orange-50 { background-color: #fff7ed; }
.bg-blue-100 { background-color: #dbeafe; }
.bg-green-50 { background-color: #f0fdf4; }
.bg-green-100 { background-color: #dcfce7; }
.bg-indigo-50 { background-color: #eef2ff; }
.bg-indigo-600 { background-color: #4f46e5; }
.bg-gradient-to-br { background-image: linear-gradient(to bottom right, var(--tw-gradient-stops)); }
.bg-gradient-to-r { background-image: linear-gradient(to right, var(--tw-gradient-stops)); }
.from-blue-500 { --tw-gradient-from: #3b82f6; --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(59, 130, 246, 0)); }
.from-green-500 { --tw-gradient-from: #22c55e; --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(34, 197, 94, 0)); }
.to-indigo-600 { --tw-gradient-to: #4f46e5; }
.to-emerald-600 { --tw-gradient-to: #059669; }
.text-xs { font-size: 0.75rem; line-height: 1rem; }
.text-sm { font-size: 0.875rem; line-height: 1.25rem; }
.text-lg { font-size: 1.125rem; line-height: 1.75rem; }
.text-xl { font-size: 1.25rem; line-height: 1.75rem; }
.text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
.text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
.font-medium { font-weight: 500; }
.font-semibold { font-weight: 600; }
.font-bold { font-weight: 700; }
.text-white { color: #ffffff; }
.text-gray-400 { color: #9ca3af; }
.text-gray-500 { color: #6b7281; }
.text-gray-700 { color: #374151; }
.text-gray-800 { color: #1f2937; }
.text-orange-600 { color: #ea580c; }
.text-orange-800 { color: #9a3412; }
.text-blue-600 { color: #2563eb; }
.text-blue-800 { color: #1e40af; }
.text-green-500 { color: #22c55e; }
.text-green-600 { color: #16a34a; }
.text-green-800 { color: #166534; }
.text-indigo-600 { color: #4f46e5; }
.text-center { text-align: center; }
.whitespace-nowrap { white-space: nowrap; }
.overflow-y-auto { overflow-y: auto; }
.shadow-sm { box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); }
.shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1); }
.transition-all { transition-property: all; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
.transition-colors { transition-property: color, background-color, border-color, text-decoration-color, fill, stroke; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
.duration-300 { transition-duration: 300ms; }
.duration-500 { transition-duration: 500ms; }
.duration-1000 { transition-duration: 1000ms; }
.transform { transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }
.-translate-y-1 { --tw-translate-y: -0.25rem; }
.-translate-y-1\/2 { --tw-translate-y: -50%; }
.hover\:bg-indigo-700:hover { background-color: #4338ca; }
.hover\:shadow-lg:hover { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1); }
.hover\:shadow-xl:hover { box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1); }
.hover\:-translate-y-1:hover { --tw-translate-y: -0.25rem; }
.focus\:outline-none:focus { outline: 2px solid transparent; outline-offset: 2px; }
.focus\:ring-2:focus { box-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); }
.focus\:ring-indigo-400:focus { --tw-ring-color: #818cf8; }

.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }

@media (min-width: 768px) {
  .md\:p-8 { padding: 2rem; }
  .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
  .md\:flex-row { flex-direction: row; }
  .md\:items-center { align-items: center; }
  .md\:w-auto { width: auto; }
  .md\:max-w-xs { max-width: 20rem; }
}

@media (min-width: 1024px) {
  .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
  .lg\:col-span-2 { grid-column: span 2 / span 2; }
  .lg\:col-span-3 { grid-column: span 3 / span 3; }
}
</style>

<style scoped>
* {
  font-family: 'Poppins', sans-serif;
}

/* Dashboard background with animated gradient */
.dashboard-background {
  background-image: 
    radial-gradient(rgba(0,0,0,0.04) 1px, transparent 1px),
    linear-gradient(-45deg, #FFF7F0, #FFF1E6, #FFEFE2, #FFF9E6);
  background-size: 3px 3px, 400% 400%;
  animation: animate-background-gradient 25s ease infinite;
  position: relative;
  overflow: hidden;
  min-height: 100vh;
}

@keyframes animate-background-gradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

/* Blob animations */
.blob-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
  pointer-events: none;
}

.blob-container::before,
.blob-container::after {
  content: '';
  position: absolute;
  border-radius: 50%;
  filter: blur(100px);
  will-change: transform;
}

.blob-container::before {
  width: 400px;
  height: 400px;
  background-color: rgba(219, 234, 254, 0.5);
  top: -10%;
  left: -10%;
  animation: animate-blob-1 15s infinite alternate ease-in-out;
}

.blob-container::after {
  width: 500px;
  height: 500px;
  background-color: rgba(224, 231, 255, 0.5);
  bottom: -15%;
  right: -15%;
  animation: animate-blob-2 18s infinite alternate ease-in-out;
}

@keyframes animate-blob-1 {
  from { transform: translate(0, 0) scale(1); }
  to { transform: translate(100px, 50px) scale(1.2); }
}

@keyframes animate-blob-2 {
  from { transform: translate(0, 0) scale(1); }
  to { transform: translate(-80px, -40px) scale(1.1); }
}

/* Hover shadows for cards */
.hover-shadow-orange:hover {
  box-shadow: 0 10px 15px -3px rgba(249, 115, 22, 0.2), 0 4px 6px -4px rgba(249, 115, 22, 0.1);
}

.hover-shadow-blue:hover {
  box-shadow: 0 10px 15px -3px rgba(59, 130, 246, 0.2), 0 4px 6px -4px rgba(59, 130, 246, 0.1);
}

.hover-shadow-green:hover {
  box-shadow: 0 10px 15px -3px rgba(34, 197, 94, 0.2), 0 4px 6px -4px rgba(34, 197, 94, 0.1);
}

/* New loading spinner */
.loading-spinner-new {
  width: 40px;
  height: 40px;
  border: 4px solid #e5e7eb;
  border-top: 4px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Progress list scrollbar */
.progress-list-new {
  max-height: 400px;
}

.progress-list-new::-webkit-scrollbar {
  width: 6px;
}

.progress-list-new::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 3px;
}

.progress-list-new::-webkit-scrollbar-thumb {
  background: linear-gradient(135deg, #3b82f6, #6366f1);
  border-radius: 3px;
}

.progress-list-new::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(135deg, #2563eb, #4f46e5);
}

/* Progress entry hover */
.progress-entry-new {
  padding: 12px;
  border-radius: 8px;
  background: #f8fafc;
  transition: all 0.2s ease;
}

.progress-entry-new:hover {
  background: #f1f5f9;
  transform: translateX(4px);
}

/* Task card hover effects */
.task-card-new {
  position: relative;
  overflow: hidden;
}

.task-card-new::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s;
}

.task-card-new:hover::before {
  left: 100%;
}

/* Line clamp utility */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Modal styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10000;
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
}

.task-modal {
  background: rgba(255, 255, 255, 0.98);
  border-radius: 18px;
  padding: 32px;
  max-width: 90%;
  width: 100%;
  max-height: 85vh;
  overflow-y: auto;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3), 0 8px 32px rgba(31, 38, 135, 0.2);
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  border: 1.5px solid rgba(255, 255, 255, 0.3);
  z-index: 10001;
  position: relative;
  animation: modalFadeIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes modalFadeIn {
  0% { opacity: 0; transform: scale(0.95) translateY(20px); }
  100% { opacity: 1; transform: scale(1) translateY(0); }
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 32px;
  padding-bottom: 20px;
  border-bottom: 2px solid rgba(56, 189, 248, 0.15);
}

.modal-header h3 {
  font-size: 1.8rem;
  font-weight: 700;
  background: linear-gradient(90deg, #2563eb 0%, #38bdf8 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin: 0;
  font-family: 'Poppins', 'Inter', Arial, sans-serif;
  letter-spacing: 0.01em;
}

.close-btn {
  background: rgba(239, 68, 68, 0.1);
  border: none;
  font-size: 1.8rem;
  color: #ef4444;
  cursor: pointer;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  font-weight: 700;
}

.close-btn:hover {
  background: rgba(239, 68, 68, 0.2);
  transform: scale(1.1);
}

.modal-content {
  margin-bottom: 24px;
}

.task-meta-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 24px;
  margin-bottom: 32px;
}

.meta-item {
  background: rgba(248, 250, 252, 0.8);
  padding: 20px;
  border-radius: 12px;
  border: 1px solid rgba(226, 232, 240, 0.6);
  transition: all 0.2s ease;
}

.meta-item:hover {
  background: rgba(241, 245, 249, 0.9);
  border-color: rgba(56, 189, 248, 0.3);
  transform: translateY(-2px);
}

.meta-label {
  font-size: 0.95rem;
  font-weight: 700;
  color: #475569;
  margin-bottom: 8px;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  font-family: 'Poppins', 'Inter', Arial, sans-serif;
}

.meta-value {
  font-size: 1.1rem;
  font-weight: 500;
  color: #1e293b;
  line-height: 1.4;
}

.reviewers-list {
  margin-top: 4px;
}

.reviewer-badges {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 8px;
}

.reviewer-badge {
  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  color: white;
  padding: 6px 14px;
  border-radius: 20px;
  font-size: 0.85rem;
  font-weight: 600;
  box-shadow: 0 2px 8px rgba(59, 130, 246, 0.2);
  transition: all 0.2s ease;
}

.reviewer-badge:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.action-items-section {
  margin-top: 32px;
  background: rgba(248, 250, 252, 0.6);
  border-radius: 16px;
  padding: 28px;
  border: 1.5px solid rgba(226, 232, 240, 0.8);
}

.action-items-section h4 {
  font-size: 1.4rem;
  font-weight: 700;
  background: linear-gradient(90deg, #2563eb 0%, #38bdf8 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin-bottom: 20px;
  font-family: 'Poppins', 'Inter', Arial, sans-serif;
  letter-spacing: 0.01em;
}

.action-content-display {
  font-size: 1rem;
  color: #374151;
  line-height: 1.6;
  background: white;
  padding: 24px;
  border-radius: 12px;
  border: 1px solid rgba(226, 232, 240, 0.8);
  max-height: 400px;
  overflow-y: auto;
}

/* Custom scrollbar for action content */
.action-content-display::-webkit-scrollbar {
  width: 8px;
}

.action-content-display::-webkit-scrollbar-track {
  background: rgba(226, 232, 240, 0.3);
  border-radius: 4px;
}

.action-content-display::-webkit-scrollbar-thumb {
  background: linear-gradient(135deg, #38bdf8, #2563eb);
  border-radius: 4px;
}

.action-content-display::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(135deg, #0ea5e9, #1d4ed8);
}

/* Style for action content HTML formatting */
.action-content-display ol,
.action-content-display ul {
  margin: 16px 0;
  padding-left: 24px;
}

.action-content-display li {
  margin: 8px 0;
  line-height: 1.5;
}

.action-content-display strong {
  color: #1e293b;
  font-weight: 600;
}

.action-content-display em {
  color: #475569;
  font-style: italic;
}
</style>


